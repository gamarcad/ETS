Process 0 (that is, the initial process):
{1}!
{2}new skU1: skey;
{3}let pkU1: pkey = pk(skU1) in
{4}out(ch, pkU1);
{5}new skU2: skey;
{6}let pkU2: pkey = pk(skU2) in
{7}out(ch, pkU2);
{8}new skD: skey;
{9}let pkD: pkey = pk(skD) in
{10}out(ch, pkD);
{11}new skT: skey;
{12}let pkT: pkey = pk(skT) in
{13}out(ch, pkT);
{14}new skV: skey;
{15}let pkV: pkey = pk(skV) in
{16}out(ch, pkV);
{17}new ide: bitstring;
{18}out(ch, ide);
{19}new idp: bitstring;
{20}out(ch, idp);
{21}new chU1: channel;
{22}new chU2: channel;
(
    {23}let skU1_1: skey = skU1 in
    {24}let ide_1: bitstring = ide in
    {25}let idp_1: bitstring = idp in
    {26}let chU1_1: channel = chU1 in
    {27}let chU2_1: channel = chU2 in
    {28}new rc: rand;
    {29}let c: bitstring = hash((ide_1,idp_1,rc)) in
    {30}new r: rand;
    {31}event User1SendPurchaseRequest(ide_1,idp_1,c,rc,pkD);
    {32}out(ch, aenc((ide_1,idp_1,rc),r,pkD));
    {33}in(ch, sigmac: bitstring);
    {34}if (checksign(sigmac,c,pkD) = c) then
    {35}event User1ReceivesPurchaseResponse(ide_1,idp_1,c,sigmac,pkD);
    {36}let ticket: bitstring = ((ide_1,idp_1,rc),sigmac) in
    {37}insert Paiement(c);
    (
        {38}new r2: rand;
        {39}let skU1_r2: skey = randsk(skU1_1,r2) in
        {40}let pkU1_r2: pkey = pk(skU1_r2) in
        {41}out(ch, pkU1_r2);
        {42}new r3: rand;
        {43}event User1SendValidationRequest(ide_1,idp_1,rc,c,pkU1_r2,pkV);
        {44}out(ch, aenc((pkU1_r2,ticket),r3,pkV));
        {45}in(ch, (Vresponse: bitstring,Vsresponse: bitstring));
        {46}if (checksign(Vsresponse,Vresponse,pkV) = Vresponse) then
        {47}let s: bitstring = adec(Vresponse,skU1_r2) in
        {48}event User1ReceivesValidationResponse(ide_1,idp_1,rc,c,pkU1_r2,pkV,s);
        {49}event User1SendValidationResponseConfirmation(ide_1,idp_1,rc,c,pkU1_r2,pkV,s);
        {50}out(chp, s)
    ) | (
        {51}in(chU2_1, pkU2_rt: pkey);
        {52}new rt: rand;
        {53}let skU1_rt: skey = randsk(skU1_1,rt) in
        {54}let pkU1_rt: pkey = pk(skU1_rt) in
        {55}out(ch, pkU1_rt);
        {56}out(chU1_1, (ide_1,idp_1,pkU1_rt));
        {57}new r2_1: rand;
        {58}let sigma_T1: bitstring = sign((pkU2_rt,c),r2_1,skU1_rt) in
        {59}new r3_1: rand;
        {60}event User1SendTransfertRequest(ide_1,idp_1,rc,c,pkU1_rt,pkU2_rt,pkT);
        {61}out(ch, (pk(skU1_rt),sigma_T1,aenc(ticket,r3_1,pkT)))
    )
) | (
    {62}!
    {63}let skD_1: skey = skD in
    {64}new st: stamp;
    {65}in(ch, request: bitstring);
    {66}let (idex: bitstring,idpx: bitstring,rc_1: rand) = adec(request,skD_1) in
    {80}get Places(=idex,=idpx) in
        0
    else
        {67}let c_1: bitstring = hash((idex,idpx,rc_1)) in
        {68}event SessionD(st,lock,idex,idpx);
        {69}event DistributorReceivesPurchaseRequest(idex,idpx,c_1,rc_1,pk(skD_1));
        {70}new r_1: rand;
        {71}event DistributorSendsPurchaseResponse(idex,idpx,c_1,sign(c_1,r_1,skD_1),pk(skD_1));
        {72}out(ch, sign(c_1,r_1,skD_1));
        {79}get Paiement(=c_1) in
            {73}insert Places(idex,idpx);
            {74}insert ValidTickets(c_1);
            {75}event SessionD(st,unlock,idex,idpx);
            {76}event User1HasValidTicket(idex,idpx,c_1,sign(c_1,r_1,skD_1),pk(skD_1))
        else
            {77}event SessionD(st,unlock,idex,idpx);
            {78}insert InvalidTickets(c_1)
) | (
    {81}!
    {82}let skV_1: skey = skV in
    {83}new st_1: stamp;
    {84}in(ch, requestVal: bitstring);
    {85}let (pkU: pkey,ticket_1: bitstring) = adec(requestVal,skV_1) in
    {86}let ((idex_1: bitstring,idpx_1: bitstring,rc_2: rand),sigmac_1: bitstring) = ticket_1 in
    {87}let c_2: bitstring = hash((idex_1,idpx_1,rc_2)) in
    {88}if (checksign(sigmac_1,c_2,pkD) = c_2) then
    {105}get InvalidTickets(=c_2) in
        0
    else
        {104}get ValidTickets(=c_2) in
        {103}get PlacesValidated(=idex_1,=idpx_1) in
            0
        else
            {89}event SessionV(st_1,lock,idex_1,idpx_1);
            {90}event ValidatorReceivesValidTicket(idex_1,idpx_1,rc_2,c_2,pkU,pk(skV_1));
            {91}new s_1: bitstring;
            {92}new r_2: rand;
            {93}new r': rand;
            {94}event ValidatorSendsEncryptedRes(idex_1,idpx_1,rc_2,c_2,pkU,pk(skV_1),s_1);
            {95}out(ch, (aenc(s_1,r_2,pkU),sign(aenc(s_1,r_2,pkU),r',skV_1)));
            {96}in(chp, s': bitstring);
            {97}if (s_1 = s') then
                {98}event SessionV(st_1,unlock,idex_1,idpx_1);
                {99}event TicketIsValidated(idex_1,idpx_1,rc_2,c_2,pkU,pk(skV_1),s_1);
                {100}insert PlacesValidated(idex_1,idpx_1);
                {101}insert InvalidTickets(c_2)
            else
                {102}event SessionV(st_1,unlock,idex_1,idpx_1)
) | (
    {106}!
    {107}let skV_2: skey = skV in
    {108}new st_2: stamp;
    {109}in(ch, requestVal_1: bitstring);
    {110}let (pkU_1: pkey,ticket_2: bitstring) = adec(requestVal_1,skV_2) in
    {111}let ((idex_2: bitstring,idpx_2: bitstring,rc_3: rand),sigmac_2: bitstring) = ticket_2 in
    {112}let c_3: bitstring = hash((idex_2,idpx_2,rc_3)) in
    {113}if (checksign(sigmac_2,c_3,pkT) = c_3) then
    {130}get InvalidTickets(=c_3) in
        0
    else
        {129}get ValidTickets(=c_3) in
        {128}get PlacesValidated(=idex_2,=idpx_2) in
            0
        else
            {114}event SessionV(st_2,lock,idex_2,idpx_2);
            {115}event ValidatorReceivesValidTicket(idex_2,idpx_2,rc_3,c_3,pkU_1,pk(skV_2));
            {116}new s_2: bitstring;
            {117}new r_3: rand;
            {118}new r'_1: rand;
            {119}event ValidatorSendsEncryptedRes(idex_2,idpx_2,rc_3,c_3,pkU_1,pk(skV_2),s_2);
            {120}out(ch, (aenc(s_2,r_3,pkU_1),sign(aenc(s_2,r_3,pkU_1),r'_1,skV_2)));
            {121}in(chp, s'_1: bitstring);
            {122}if (s_2 = s'_1) then
                {123}event SessionV(st_2,unlock,idex_2,idpx_2);
                {124}event TicketIsValidated(idex_2,idpx_2,rc_3,c_3,pkU_1,pk(skV_2),s_2);
                {125}insert PlacesValidated(idex_2,idpx_2);
                {126}insert InvalidTickets(c_3)
            else
                {127}event SessionV(st_2,unlock,idex_2,idpx_2)
) | (
    {131}let skU2_1: skey = skU2 in
    {132}let chU1_2: channel = chU1 in
    {133}let chU2_2: channel = chU2 in
    {134}new rt_1: rand;
    {135}let skU2_rt: skey = randsk(skU2_1,rt_1) in
    {136}let pkU2_rt_1: pkey = pk(skU2_rt) in
    {137}out(ch, pkU2_rt_1);
    {138}out(chU2_2, pkU2_rt_1);
    {139}in(chU1_2, (idex_3: bitstring,idpx_3: bitstring,pkU1_rt_1: pkey));
    {140}new r1: rand;
    {141}let sigma_T2: bitstring = sign((pkU1_rt_1,idex_3,idpx_3),r1,skU2_rt) in
    {142}event User2SendTransfertRequest(idex_3,idpx_3,pkU1_rt_1,pkU2_rt_1,pkT);
    {143}out(ch, (pk(skU2_rt),sigma_T2));
    {144}in(ch, responseT: bitstring);
    {145}if (checksign(responseT,(idex_3,idpx_3,pk(skU2_rt),pkU1_rt_1),pkT) = (idex_3,idpx_3,pk(skU2_rt),pkU1_rt_1)) then
    {146}event User2GetTApprobation(idex_3,idpx_3,pkU1_rt_1,pkU2_rt_1,pkT);
    {147}new rcx: rand;
    {148}let cx: bitstring = hash((idex_3,idpx_3,rcx)) in
    {149}new r2_2: rand;
    {150}event User2SendPurchaseRequest(idex_3,idpx_3,cx,pkU1_rt_1,pk(skU2_rt),pkT);
    {151}out(ch, aenc((idex_3,idpx_3,rcx),r2_2,pkT));
    {152}in(ch, sigmacx: bitstring);
    {153}if (checksign(sigmacx,cx,pkT) = cx) then
    {154}event User2ReceivesPurchaseResponse(idex_3,idpx_3,cx,sigmacx,pkU1_rt_1,pk(skU2_rt),pkT);
    {155}let ticketx: bitstring = ((idex_3,idpx_3,rcx),sigmacx) in
    {156}insert Paiement(cx);
    {157}new r3_2: rand;
    {158}let skU2_r3: skey = randsk(skU2_1,r3_2) in
    {159}let pkU2_r3: pkey = pk(skU2_r3) in
    {160}out(ch, pkU2_r3);
    {161}new r4: rand;
    {162}event User2SendValidationRequest(idex_3,idpx_3,rcx,cx,pkU2_r3,pkV);
    {163}out(ch, aenc((pkU2_r3,ticketx),r4,pkV));
    {164}in(ch, (Vresponse_1: bitstring,Vsresponse_1: bitstring));
    {165}if (checksign(Vsresponse_1,Vresponse_1,pkV) = Vresponse_1) then
    {166}let s_3: bitstring = adec(Vresponse_1,skU2_r3) in
    {167}event User2ReceivesValidationResponse(idex_3,idpx_3,rcx,cx,pkU2_r3,pkV,s_3);
    {168}event User2SendValidationResponseConfirmation(idex_3,idpx_3,rcx,cx,pkU2_r3,pkV,s_3);
    {169}out(chp, s_3)
) | (
    {170}!
    {171}let skT_1: skey = skT in
    {172}new st_3: stamp;
    {173}in(ch, requestUser2: bitstring);
    {174}let (pkU2_rt_2: pkey,sigma_T2_1: bitstring) = requestUser2 in
    {175}in(ch, requestUser1: bitstring);
    {176}let (pkU1_rt_2: pkey,sigma_T1_1: bitstring,eticket: bitstring) = requestUser1 in
    {177}let ((idex_4: bitstring,idpx_4: bitstring,rcx_1: rand),sigmacx_1: bitstring) = adec(eticket,skT_1) in
    {178}let cx_1: bitstring = hash((idex_4,idpx_4,rcx_1)) in
    {179}if ((checksign(sigmacx_1,cx_1,pkD) = cx_1) && ((checksign(sigma_T2_1,(pkU1_rt_2,idex_4,idpx_4),pkU2_rt_2) = (pkU1_rt_2,idex_4,idpx_4)) && (checksign(sigma_T1_1,(pkU2_rt_2,cx_1),pkU1_rt_2) = (pkU2_rt_2,cx_1)))) then
    {199}get InvalidTickets(=cx_1) in
        0
    else
        {198}get ValidTickets(=cx_1) in
        {180}event SessionT(st_3,lock,idex_4,idpx_4);
        {181}event TReceiveTransfertRequest(idex_4,idpx_4,rcx_1,cx_1,pkU1_rt_2,pkU2_rt_2,pk(skT_1));
        {182}event TSendApprobationU2(idex_4,idpx_4,rcx_1,cx_1,pkU1_rt_2,pkU2_rt_2,pk(skT_1));
        {183}new r_4: rand;
        {184}out(ch, sign((idex_4,idpx_4,pkU2_rt_2,pkU1_rt_2),r_4,skT_1));
        {185}in(ch, request_1: bitstring);
        {186}let (=idex_4,=idpx_4,rc_4: rand) = adec(request_1,skT_1) in
        {187}let c_4: bitstring = hash((idex_4,idpx_4,rc_4)) in
        {188}event TReceivesPurchaseRequest(idex_4,idpx_4,cx_1,c_4,pkU1_rt_2,pkU2_rt_2,pk(skT_1));
        {189}new r1_1: rand;
        {190}event TSendsPurchaseResponse(idex_4,idpx_4,cx_1,c_4,sign(c_4,r1_1,skT_1),pkU1_rt_2,pkU2_rt_2,pk(skT_1));
        {191}out(ch, sign(c_4,r1_1,skT_1));
        {197}get Paiement(=c_4) in
            {192}insert ValidTickets(c_4);
            {193}event SessionT(st_3,unlock,idex_4,idpx_4);
            {194}event User2HasValidTicket(idex_4,idpx_4,c_4,sign(c_4,r1_1,skT_1),pkU1_rt_2,pk(skT_1))
        else
            {195}event SessionT(st_3,unlock,idex_4,idpx_4);
            {196}insert InvalidTickets(c_4)
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}!
{2}new skU1: skey;
{3}let pkU1: pkey = pk(skU1) in
{4}out(ch, pkU1);
{5}new skU2: skey;
{6}let pkU2: pkey = pk(skU2) in
{7}out(ch, pkU2);
{8}new skD: skey;
{9}let pkD: pkey = pk(skD) in
{10}out(ch, pkD);
{11}new skT: skey;
{12}let pkT: pkey = pk(skT) in
{13}out(ch, pkT);
{14}new skV: skey;
{15}let pkV: pkey = pk(skV) in
{16}out(ch, pkV);
{17}new ide: bitstring;
{18}out(ch, ide);
{19}new idp: bitstring;
{20}out(ch, idp);
{21}new chU1: channel;
{22}new chU2: channel;
(
    {28}new rc: rand;
    {30}new r: rand;
    {25}let idp_1: bitstring = idp in
    {24}let ide_1: bitstring = ide in
    {29}let c: bitstring = hash((ide_1,idp_1,rc)) in
    {31}event User1SendPurchaseRequest(ide_1,idp_1,c,rc,pkD);
    {32}out(ch, aenc((ide_1,idp_1,rc),r,pkD));
    {33}in(ch, sigmac: bitstring);
    {34}if (checksign(sigmac,c,pkD) = c) then
    {35}event User1ReceivesPurchaseResponse(ide_1,idp_1,c,sigmac,pkD);
    {37}insert Paiement(c);
    {36}let ticket: bitstring = ((ide_1,idp_1,rc),sigmac) in
    {23}let skU1_1: skey = skU1 in
    (
        {38}new r2: rand;
        {39}let skU1_r2: skey = randsk(skU1_1,r2) in
        {40}let pkU1_r2: pkey = pk(skU1_r2) in
        {41}out(ch, pkU1_r2);
        {42}new r3: rand;
        {43}event User1SendValidationRequest(ide_1,idp_1,rc,c,pkU1_r2,pkV);
        {44}out(ch, aenc((pkU1_r2,ticket),r3,pkV));
        {45}in(ch, (Vresponse: bitstring,Vsresponse: bitstring));
        {46}if (checksign(Vsresponse,Vresponse,pkV) = Vresponse) then
        {47}let s: bitstring = adec(Vresponse,skU1_r2) in
        {48}event User1ReceivesValidationResponse(ide_1,idp_1,rc,c,pkU1_r2,pkV,s);
        {49}event User1SendValidationResponseConfirmation(ide_1,idp_1,rc,c,pkU1_r2,pkV,s);
        {50}out(chp, s)
    ) | (
        {27}let chU2_1: channel = chU2 in
        {51}in(chU2_1, pkU2_rt: pkey);
        {52}new rt: rand;
        {53}let skU1_rt: skey = randsk(skU1_1,rt) in
        {54}let pkU1_rt: pkey = pk(skU1_rt) in
        {55}out(ch, pkU1_rt);
        {26}let chU1_1: channel = chU1 in
        {56}out(chU1_1, (ide_1,idp_1,pkU1_rt));
        {57}new r2_1: rand;
        {59}new r3_1: rand;
        {60}event User1SendTransfertRequest(ide_1,idp_1,rc,c,pkU1_rt,pkU2_rt,pkT);
        {58}let sigma_T1: bitstring = sign((pkU2_rt,c),r2_1,skU1_rt) in
        {61}out(ch, (pk(skU1_rt),sigma_T1,aenc(ticket,r3_1,pkT)))
    )
) | (
    {62}!
    {64}new st: stamp;
    {65}in(ch, request: bitstring);
    {63}let skD_1: skey = skD in
    {66}let (idex: bitstring,idpx: bitstring,rc_1: rand) = adec(request,skD_1) in
    {80}get Places(=idex,=idpx) in
        0
    else
        {68}event SessionD(st,lock,idex,idpx);
        {67}let c_1: bitstring = hash((idex,idpx,rc_1)) in
        {69}event DistributorReceivesPurchaseRequest(idex,idpx,c_1,rc_1,pk(skD_1));
        {70}new r_1: rand;
        {71}event DistributorSendsPurchaseResponse(idex,idpx,c_1,sign(c_1,r_1,skD_1),pk(skD_1));
        {72}out(ch, sign(c_1,r_1,skD_1));
        {79}get Paiement(=c_1) in
            {73}insert Places(idex,idpx);
            {74}insert ValidTickets(c_1);
            {75}event SessionD(st,unlock,idex,idpx);
            {76}event User1HasValidTicket(idex,idpx,c_1,sign(c_1,r_1,skD_1),pk(skD_1))
        else
            {77}event SessionD(st,unlock,idex,idpx);
            {78}insert InvalidTickets(c_1)
) | (
    {81}!
    {83}new st_1: stamp;
    {84}in(ch, requestVal: bitstring);
    {82}let skV_1: skey = skV in
    {85}let (pkU: pkey,ticket_1: bitstring) = adec(requestVal,skV_1) in
    {86}let ((idex_1: bitstring,idpx_1: bitstring,rc_2: rand),sigmac_1: bitstring) = ticket_1 in
    {87}let c_2: bitstring = hash((idex_1,idpx_1,rc_2)) in
    {88}if (checksign(sigmac_1,c_2,pkD) = c_2) then
    {105}get InvalidTickets(=c_2) in
        0
    else
        {104}get ValidTickets(=c_2) in
        {103}get PlacesValidated(=idex_1,=idpx_1) in
            0
        else
            {89}event SessionV(st_1,lock,idex_1,idpx_1);
            {90}event ValidatorReceivesValidTicket(idex_1,idpx_1,rc_2,c_2,pkU,pk(skV_1));
            {91}new s_1: bitstring;
            {92}new r_2: rand;
            {93}new r': rand;
            {94}event ValidatorSendsEncryptedRes(idex_1,idpx_1,rc_2,c_2,pkU,pk(skV_1),s_1);
            {95}out(ch, (aenc(s_1,r_2,pkU),sign(aenc(s_1,r_2,pkU),r',skV_1)));
            {96}in(chp, s': bitstring);
            {97}if (s_1 = s') then
                {98}event SessionV(st_1,unlock,idex_1,idpx_1);
                {99}event TicketIsValidated(idex_1,idpx_1,rc_2,c_2,pkU,pk(skV_1),s_1);
                {100}insert PlacesValidated(idex_1,idpx_1);
                {101}insert InvalidTickets(c_2)
            else
                {102}event SessionV(st_1,unlock,idex_1,idpx_1)
) | (
    {106}!
    {108}new st_2: stamp;
    {109}in(ch, requestVal_1: bitstring);
    {107}let skV_2: skey = skV in
    {110}let (pkU_1: pkey,ticket_2: bitstring) = adec(requestVal_1,skV_2) in
    {111}let ((idex_2: bitstring,idpx_2: bitstring,rc_3: rand),sigmac_2: bitstring) = ticket_2 in
    {112}let c_3: bitstring = hash((idex_2,idpx_2,rc_3)) in
    {113}if (checksign(sigmac_2,c_3,pkT) = c_3) then
    {130}get InvalidTickets(=c_3) in
        0
    else
        {129}get ValidTickets(=c_3) in
        {128}get PlacesValidated(=idex_2,=idpx_2) in
            0
        else
            {114}event SessionV(st_2,lock,idex_2,idpx_2);
            {115}event ValidatorReceivesValidTicket(idex_2,idpx_2,rc_3,c_3,pkU_1,pk(skV_2));
            {116}new s_2: bitstring;
            {117}new r_3: rand;
            {118}new r'_1: rand;
            {119}event ValidatorSendsEncryptedRes(idex_2,idpx_2,rc_3,c_3,pkU_1,pk(skV_2),s_2);
            {120}out(ch, (aenc(s_2,r_3,pkU_1),sign(aenc(s_2,r_3,pkU_1),r'_1,skV_2)));
            {121}in(chp, s'_1: bitstring);
            {122}if (s_2 = s'_1) then
                {123}event SessionV(st_2,unlock,idex_2,idpx_2);
                {124}event TicketIsValidated(idex_2,idpx_2,rc_3,c_3,pkU_1,pk(skV_2),s_2);
                {125}insert PlacesValidated(idex_2,idpx_2);
                {126}insert InvalidTickets(c_3)
            else
                {127}event SessionV(st_2,unlock,idex_2,idpx_2)
) | (
    {134}new rt_1: rand;
    {131}let skU2_1: skey = skU2 in
    {135}let skU2_rt: skey = randsk(skU2_1,rt_1) in
    {136}let pkU2_rt_1: pkey = pk(skU2_rt) in
    {137}out(ch, pkU2_rt_1);
    {133}let chU2_2: channel = chU2 in
    {138}out(chU2_2, pkU2_rt_1);
    {132}let chU1_2: channel = chU1 in
    {139}in(chU1_2, (idex_3: bitstring,idpx_3: bitstring,pkU1_rt_1: pkey));
    {140}new r1: rand;
    {142}event User2SendTransfertRequest(idex_3,idpx_3,pkU1_rt_1,pkU2_rt_1,pkT);
    {141}let sigma_T2: bitstring = sign((pkU1_rt_1,idex_3,idpx_3),r1,skU2_rt) in
    {143}out(ch, (pk(skU2_rt),sigma_T2));
    {144}in(ch, responseT: bitstring);
    {145}if (checksign(responseT,(idex_3,idpx_3,pk(skU2_rt),pkU1_rt_1),pkT) = (idex_3,idpx_3,pk(skU2_rt),pkU1_rt_1)) then
    {146}event User2GetTApprobation(idex_3,idpx_3,pkU1_rt_1,pkU2_rt_1,pkT);
    {147}new rcx: rand;
    {149}new r2_2: rand;
    {148}let cx: bitstring = hash((idex_3,idpx_3,rcx)) in
    {150}event User2SendPurchaseRequest(idex_3,idpx_3,cx,pkU1_rt_1,pk(skU2_rt),pkT);
    {151}out(ch, aenc((idex_3,idpx_3,rcx),r2_2,pkT));
    {152}in(ch, sigmacx: bitstring);
    {153}if (checksign(sigmacx,cx,pkT) = cx) then
    {154}event User2ReceivesPurchaseResponse(idex_3,idpx_3,cx,sigmacx,pkU1_rt_1,pk(skU2_rt),pkT);
    {156}insert Paiement(cx);
    {157}new r3_2: rand;
    {158}let skU2_r3: skey = randsk(skU2_1,r3_2) in
    {159}let pkU2_r3: pkey = pk(skU2_r3) in
    {160}out(ch, pkU2_r3);
    {161}new r4: rand;
    {162}event User2SendValidationRequest(idex_3,idpx_3,rcx,cx,pkU2_r3,pkV);
    {155}let ticketx: bitstring = ((idex_3,idpx_3,rcx),sigmacx) in
    {163}out(ch, aenc((pkU2_r3,ticketx),r4,pkV));
    {164}in(ch, (Vresponse_1: bitstring,Vsresponse_1: bitstring));
    {165}if (checksign(Vsresponse_1,Vresponse_1,pkV) = Vresponse_1) then
    {166}let s_3: bitstring = adec(Vresponse_1,skU2_r3) in
    {167}event User2ReceivesValidationResponse(idex_3,idpx_3,rcx,cx,pkU2_r3,pkV,s_3);
    {168}event User2SendValidationResponseConfirmation(idex_3,idpx_3,rcx,cx,pkU2_r3,pkV,s_3);
    {169}out(chp, s_3)
) | (
    {170}!
    {172}new st_3: stamp;
    {173}in(ch, requestUser2: bitstring);
    {174}let (pkU2_rt_2: pkey,sigma_T2_1: bitstring) = requestUser2 in
    {175}in(ch, requestUser1: bitstring);
    {176}let (pkU1_rt_2: pkey,sigma_T1_1: bitstring,eticket: bitstring) = requestUser1 in
    {171}let skT_1: skey = skT in
    {177}let ((idex_4: bitstring,idpx_4: bitstring,rcx_1: rand),sigmacx_1: bitstring) = adec(eticket,skT_1) in
    {178}let cx_1: bitstring = hash((idex_4,idpx_4,rcx_1)) in
    {179}if ((checksign(sigmacx_1,cx_1,pkD) = cx_1) && ((checksign(sigma_T2_1,(pkU1_rt_2,idex_4,idpx_4),pkU2_rt_2) = (pkU1_rt_2,idex_4,idpx_4)) && (checksign(sigma_T1_1,(pkU2_rt_2,cx_1),pkU1_rt_2) = (pkU2_rt_2,cx_1)))) then
    {199}get InvalidTickets(=cx_1) in
        0
    else
        {198}get ValidTickets(=cx_1) in
        {180}event SessionT(st_3,lock,idex_4,idpx_4);
        {181}event TReceiveTransfertRequest(idex_4,idpx_4,rcx_1,cx_1,pkU1_rt_2,pkU2_rt_2,pk(skT_1));
        {182}event TSendApprobationU2(idex_4,idpx_4,rcx_1,cx_1,pkU1_rt_2,pkU2_rt_2,pk(skT_1));
        {183}new r_4: rand;
        {184}out(ch, sign((idex_4,idpx_4,pkU2_rt_2,pkU1_rt_2),r_4,skT_1));
        {185}in(ch, request_1: bitstring);
        {186}let (=idex_4,=idpx_4,rc_4: rand) = adec(request_1,skT_1) in
        {187}let c_4: bitstring = hash((idex_4,idpx_4,rc_4)) in
        {188}event TReceivesPurchaseRequest(idex_4,idpx_4,cx_1,c_4,pkU1_rt_2,pkU2_rt_2,pk(skT_1));
        {189}new r1_1: rand;
        {190}event TSendsPurchaseResponse(idex_4,idpx_4,cx_1,c_4,sign(c_4,r1_1,skT_1),pkU1_rt_2,pkU2_rt_2,pk(skT_1));
        {191}out(ch, sign(c_4,r1_1,skT_1));
        {197}get Paiement(=c_4) in
            {192}insert ValidTickets(c_4);
            {193}event SessionT(st_3,unlock,idex_4,idpx_4);
            {194}event User2HasValidTicket(idex_4,idpx_4,c_4,sign(c_4,r1_1,skT_1),pkU1_rt_2,pk(skT_1))
        else
            {195}event SessionT(st_3,unlock,idex_4,idpx_4);
            {196}insert InvalidTickets(c_4)
)

-- Axiom event(SessionD(s_4,p,ide_2,idp_2)) && event(SessionD(s'_2,p',ide_2,idp_2)) ==> s_4 = s'_2 || p ≠ p' in process 1.
-- Axiom event(SessionV(s_4,p,ide_2,idp_2)) && event(SessionV(s'_2,p',ide_2,idp_2)) ==> s_4 = s'_2 || p ≠ p' in process 1.
-- Axiom event(SessionT(s_4,p,ide_2,idp_2)) && event(SessionT(s'_2,p',ide_2,idp_2)) ==> s_4 = s'_2 || p ≠ p' in process 1.
-- Query event(User1HasValidTicket(ide_2,idp_2,c_5,sigmac_3,pkD_1)) ==> event(User1ReceivesPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1)) in process 1.
Translating the process into Horn clauses...
select attacker(pk(sk))/-5000
Completing...
200 rules inserted. Base: 176 rules (43 with conclusion selected). Queue: 52 rules.
400 rules inserted. Base: 256 rules (47 with conclusion selected). Queue: 41 rules.
600 rules inserted. Base: 337 rules (55 with conclusion selected). Queue: 17 rules.
Starting query event(User1HasValidTicket(ide_2,idp_2,c_5,sigmac_3,pkD_1)) ==> event(User1ReceivesPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1))
goal reachable: begin(SessionD(st_4,unlock[],ide_2,idp_2)) && begin(User1ReceivesPurchaseResponse(ide_2,idp_2,hash((ide_2,idp_2,rc_5)),sign(hash((ide_2,idp_2,rc_5)),r_5,skD_2),pk(skD_2))) && begin(SessionD(st_4,lock[],ide_2,idp_2)) -> end(User1HasValidTicket(ide_2,idp_2,hash((ide_2,idp_2,rc_5)),sign(hash((ide_2,idp_2,rc_5)),r_5,skD_2),pk(skD_2)))
Abbreviations:
ide_2 = ide[!1 = @sid]
idp_2 = idp[!1 = @sid]
rc_5 = rc[!1 = @sid]
r_6 = r[!1 = @sid]
skD_2 = skD[!1 = @sid]
r_5 = r_1[request = aenc((ide_2,idp_2,rc_5),r_6,pk(skD_2)),!2 = @sid_1,!1 = @sid]
st_4 = st[!2 = @sid_1,!1 = @sid]
RESULT event(User1HasValidTicket(ide_2,idp_2,c_5,sigmac_3,pkD_1)) ==> event(User1ReceivesPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1)) is true.
-- Query event(User1ReceivesPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1)) ==> event(DistributorSendsPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1)) in process 1.
Translating the process into Horn clauses...
select attacker(pk(sk))/-5000
Completing...
200 rules inserted. Base: 169 rules (43 with conclusion selected). Queue: 54 rules.
400 rules inserted. Base: 250 rules (47 with conclusion selected). Queue: 41 rules.
600 rules inserted. Base: 331 rules (55 with conclusion selected). Queue: 17 rules.
Starting query event(User1ReceivesPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1)) ==> event(DistributorSendsPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1))
goal reachable: begin(DistributorSendsPurchaseResponse(ide_2,idp_2,hash((ide_2,idp_2,rc_5)),sign(hash((ide_2,idp_2,rc_5)),r_5,skD_2),pk(skD_2))) && begin(SessionD(st_4,lock[],ide_2,idp_2)) -> end(User1ReceivesPurchaseResponse(ide_2,idp_2,hash((ide_2,idp_2,rc_5)),sign(hash((ide_2,idp_2,rc_5)),r_5,skD_2),pk(skD_2)))
Abbreviations:
ide_2 = ide[!1 = @sid]
idp_2 = idp[!1 = @sid]
rc_5 = rc[!1 = @sid]
r_6 = r[!1 = @sid]
skD_2 = skD[!1 = @sid]
r_5 = r_1[request = aenc((ide_2,idp_2,rc_5),r_6,pk(skD_2)),!2 = @sid_1,!1 = @sid]
st_4 = st[!2 = @sid_1,!1 = @sid]
RESULT event(User1ReceivesPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1)) ==> event(DistributorSendsPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1)) is true.
-- Query inj-event(User1HasValidTicket(ide_2,idp_2,c_5,sigmac_3,pkD_1)) ==> inj-event(User1ReceivesPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1)) in process 1.
Translating the process into Horn clauses...
select attacker(pk(sk))/-5000
Completing...
200 rules inserted. Base: 176 rules (43 with conclusion selected). Queue: 52 rules.
400 rules inserted. Base: 257 rules (47 with conclusion selected). Queue: 41 rules.
600 rules inserted. Base: 340 rules (55 with conclusion selected). Queue: 17 rules.
Starting query inj-event(User1HasValidTicket(ide_2,idp_2,c_5,sigmac_3,pkD_1)) ==> inj-event(User1ReceivesPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1))
goal reachable: begin(SessionD(st_4,unlock[],ide_2,idp_2)) && begin(User1ReceivesPurchaseResponse(ide_2,idp_2,hash((ide_2,idp_2,rc_5)),sign(hash((ide_2,idp_2,rc_5)),r_5,skD_2),pk(skD_2)),@occ35_1) && begin(SessionD(st_4,lock[],ide_2,idp_2)) -> end(@occ76_1,User1HasValidTicket(ide_2,idp_2,hash((ide_2,idp_2,rc_5)),sign(hash((ide_2,idp_2,rc_5)),r_5,skD_2),pk(skD_2)))
The 1st, 2nd, 3rd hypotheses occur strictly before the conclusion.
Abbreviations:
ide_2 = ide[!1 = @sid]
idp_2 = idp[!1 = @sid]
rc_5 = rc[!1 = @sid]
r_6 = r[!1 = @sid]
skD_2 = skD[!1 = @sid]
@occ76_1 = @occ76[request = aenc((ide_2,idp_2,rc_5),r_6,pk(skD_2)),!2 = @sid_1,!1 = @sid]
r_5 = r_1[request = aenc((ide_2,idp_2,rc_5),r_6,pk(skD_2)),!2 = @sid_1,!1 = @sid]
st_4 = st[!2 = @sid_1,!1 = @sid]
@occ35_1 = @occ35[sigmac = sign(hash((ide_2,idp_2,rc_5)),r_5,skD_2),!1 = @sid]
RESULT inj-event(User1HasValidTicket(ide_2,idp_2,c_5,sigmac_3,pkD_1)) ==> inj-event(User1ReceivesPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1)) is true.
-- Query inj-event(User1ReceivesPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1)) ==> inj-event(DistributorSendsPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1)) in process 1.
Translating the process into Horn clauses...
select attacker(pk(sk))/-5000
Completing...
200 rules inserted. Base: 174 rules (43 with conclusion selected). Queue: 54 rules.
400 rules inserted. Base: 277 rules (47 with conclusion selected). Queue: 41 rules.
600 rules inserted. Base: 362 rules (55 with conclusion selected). Queue: 17 rules.
Starting query inj-event(User1ReceivesPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1)) ==> inj-event(DistributorSendsPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1))
goal reachable: begin(DistributorSendsPurchaseResponse(ide_2,idp_2,hash((ide_2,idp_2,rc_5)),sign(hash((ide_2,idp_2,rc_5)),r_5,skD_2),pk(skD_2)),@occ71_1) && begin(SessionD(st_4,lock[],ide_2,idp_2)) -> end(@occ35_2,User1ReceivesPurchaseResponse(ide_2,idp_2,hash((ide_2,idp_2,rc_5)),sign(hash((ide_2,idp_2,rc_5)),r_5,skD_2),pk(skD_2)))
The 1st, 2nd hypotheses occur strictly before the conclusion.
Abbreviations:
ide_2 = ide[!1 = @sid]
idp_2 = idp[!1 = @sid]
rc_5 = rc[!1 = @sid]
r_6 = r[!1 = @sid]
skD_2 = skD[!1 = @sid]
r_5 = r_1[request = aenc((ide_2,idp_2,rc_5),r_6,pk(skD_2)),!2 = @sid_1,!1 = @sid]
@occ35_2 = @occ35_1[sigmac = sign(hash((ide_2,idp_2,rc_5)),r_5,skD_2),!1 = @sid]
@occ71_1 = @occ71[request = aenc((ide_2,idp_2,rc_5),r_6,pk(skD_2)),!2 = @sid_1,!1 = @sid]
st_4 = st[!2 = @sid_1,!1 = @sid]
RESULT inj-event(User1ReceivesPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1)) ==> inj-event(DistributorSendsPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1)) is true.

--------------------------------------------------------------
Verification summary:

Query(ies):
 - Query event(User1HasValidTicket(ide_2,idp_2,c_5,sigmac_3,pkD_1)) ==> event(User1ReceivesPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1)) is true.
 - Query event(User1ReceivesPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1)) ==> event(DistributorSendsPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1)) is true.
 - Query inj-event(User1HasValidTicket(ide_2,idp_2,c_5,sigmac_3,pkD_1)) ==> inj-event(User1ReceivesPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1)) is true.
 - Query inj-event(User1ReceivesPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1)) ==> inj-event(DistributorSendsPurchaseResponse(ide_2,idp_2,c_5,sigmac_3,pkD_1)) is true.
Associated axiom(s):
 - Axiom event(SessionD(s_4,p,ide_2,idp_2)) && event(SessionD(s'_2,p',ide_2,idp_2)) ==> s_4 = s'_2 || p ≠ p' in process 1.
 - Axiom event(SessionV(s_4,p,ide_2,idp_2)) && event(SessionV(s'_2,p',ide_2,idp_2)) ==> s_4 = s'_2 || p ≠ p' in process 1.
 - Axiom event(SessionT(s_4,p,ide_2,idp_2)) && event(SessionT(s'_2,p',ide_2,idp_2)) ==> s_4 = s'_2 || p ≠ p' in process 1.

--------------------------------------------------------------

